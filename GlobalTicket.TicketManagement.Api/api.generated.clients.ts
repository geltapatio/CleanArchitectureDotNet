//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IClient {
    /**
     * @return Success
     */
    getAllCategories(): Observable<CategoryListVm[]>;
    /**
     * @param includeHistory (optional) 
     * @return Success
     */
    getCategoriesWithEvents(includeHistory: boolean | undefined): Observable<CategoryEventListVm[]>;
    /**
     * @param body (optional) 
     * @return Success
     */
    addCategory(body: CreateCategoryCommand | undefined): Observable<CreateCategoryCommandResponse>;
    /**
     * @return Success
     */
    getAllEvents(): Observable<EventListVm[]>;
    /**
     * @param body (optional) 
     * @return Success
     */
    addEvent(body: CreateEventCommand | undefined): Observable<string>;
    /**
     * @param body (optional) 
     * @return Success
     */
    updateEvent(body: UpdateEventCommand | undefined): Observable<void>;
    /**
     * @return Success
     */
    getEventById(id: string): Observable<EventDetailVm>;
    /**
     * @return Success
     */
    deleteEvent(id: string): Observable<void>;
    /**
     * @return Success
     */
    exportEvents(): Observable<void>;
    /**
     * @param date (optional) 
     * @param page (optional) 
     * @param size (optional) 
     * @return Success
     */
    getPagedOrdersForMonth(date: Date | undefined, page: number | undefined, size: number | undefined): Observable<PagedOrdersForMonthVm>;
}

@Injectable()
export class Client implements IClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllCategories(httpContext?: HttpContext): Observable<CategoryListVm[]> {
        let url_ = this.baseUrl + "/api/Category/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllCategories(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllCategories(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CategoryListVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CategoryListVm[]>;
        }));
    }

    protected processGetAllCategories(response: HttpResponseBase): Observable<CategoryListVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CategoryListVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CategoryListVm[]>(null as any);
    }

    /**
     * @param includeHistory (optional) 
     * @return Success
     */
    getCategoriesWithEvents(includeHistory: boolean | undefined, httpContext?: HttpContext): Observable<CategoryEventListVm[]> {
        let url_ = this.baseUrl + "/api/Category/allwithevents?";
        if (includeHistory === null)
            throw new Error("The parameter 'includeHistory' cannot be null.");
        else if (includeHistory !== undefined)
            url_ += "includeHistory=" + encodeURIComponent("" + includeHistory) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCategoriesWithEvents(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCategoriesWithEvents(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CategoryEventListVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CategoryEventListVm[]>;
        }));
    }

    protected processGetCategoriesWithEvents(response: HttpResponseBase): Observable<CategoryEventListVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CategoryEventListVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addCategory(body: CreateCategoryCommand | undefined, httpContext?: HttpContext): Observable<CreateCategoryCommandResponse> {
        let url_ = this.baseUrl + "/api/Category";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddCategory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CreateCategoryCommandResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CreateCategoryCommandResponse>;
        }));
    }

    protected processAddCategory(response: HttpResponseBase): Observable<CreateCategoryCommandResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateCategoryCommandResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateCategoryCommandResponse>(null as any);
    }

    /**
     * @return Success
     */
    getAllEvents(httpContext?: HttpContext): Observable<EventListVm[]> {
        let url_ = this.baseUrl + "/api/Events";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllEvents(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllEvents(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EventListVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EventListVm[]>;
        }));
    }

    protected processGetAllEvents(response: HttpResponseBase): Observable<EventListVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EventListVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addEvent(body: CreateEventCommand | undefined, httpContext?: HttpContext): Observable<string> {
        let url_ = this.baseUrl + "/api/Events";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddEvent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddEvent(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processAddEvent(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateEvent(body: UpdateEventCommand | undefined, httpContext?: HttpContext): Observable<void> {
        let url_ = this.baseUrl + "/api/Events";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateEvent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateEvent(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateEvent(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @return Success
     */
    getEventById(id: string, httpContext?: HttpContext): Observable<EventDetailVm> {
        let url_ = this.baseUrl + "/api/Events/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEventById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEventById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EventDetailVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EventDetailVm>;
        }));
    }

    protected processGetEventById(response: HttpResponseBase): Observable<EventDetailVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EventDetailVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EventDetailVm>(null as any);
    }

    /**
     * @return Success
     */
    deleteEvent(id: string, httpContext?: HttpContext): Observable<void> {
        let url_ = this.baseUrl + "/api/Events/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteEvent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteEvent(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteEvent(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @return Success
     */
    exportEvents(httpContext?: HttpContext): Observable<void> {
        let url_ = this.baseUrl + "/api/Events/export";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportEvents(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportEvents(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processExportEvents(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    /**
     * @param date (optional) 
     * @param page (optional) 
     * @param size (optional) 
     * @return Success
     */
    getPagedOrdersForMonth(date: Date | undefined, page: number | undefined, size: number | undefined, httpContext?: HttpContext): Observable<PagedOrdersForMonthVm> {
        let url_ = this.baseUrl + "/getpagedordersformonth?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent(date ? "" + date.toISOString() : "") + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "size=" + encodeURIComponent("" + size) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPagedOrdersForMonth(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPagedOrdersForMonth(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PagedOrdersForMonthVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PagedOrdersForMonthVm>;
        }));
    }

    protected processGetPagedOrdersForMonth(response: HttpResponseBase): Observable<PagedOrdersForMonthVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedOrdersForMonthVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }
}

export class CategoryDto {
    id?: string;
    name?: string | undefined;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export class CategoryEventDto {
    eventId?: string;
    name?: string | undefined;
    price?: number;
    artist?: string | undefined;
    date?: Date;
    categoryId?: string;

    init(_data?: any) {
        if (_data) {
            this.eventId = _data["eventId"];
            this.name = _data["name"];
            this.price = _data["price"];
            this.artist = _data["artist"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.categoryId = _data["categoryId"];
        }
    }

    static fromJS(data: any): CategoryEventDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryEventDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventId"] = this.eventId;
        data["name"] = this.name;
        data["price"] = this.price;
        data["artist"] = this.artist;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["categoryId"] = this.categoryId;
        return data;
    }
}

export class CategoryEventListVm {
    categoryId?: string;
    name?: string | undefined;
    events?: CategoryEventDto[] | undefined;

    init(_data?: any) {
        if (_data) {
            this.categoryId = _data["categoryId"];
            this.name = _data["name"];
            if (Array.isArray(_data["events"])) {
                this.events = [] as any;
                for (let item of _data["events"])
                    this.events!.push(CategoryEventDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CategoryEventListVm {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryEventListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryId"] = this.categoryId;
        data["name"] = this.name;
        if (Array.isArray(this.events)) {
            data["events"] = [];
            for (let item of this.events)
                data["events"].push(item.toJSON());
        }
        return data;
    }
}

export class CategoryListVm {
    categoryId?: string;
    name?: string | undefined;

    init(_data?: any) {
        if (_data) {
            this.categoryId = _data["categoryId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CategoryListVm {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryId"] = this.categoryId;
        data["name"] = this.name;
        return data;
    }
}

export class CreateCategoryCommand {
    name?: string | undefined;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export class CreateCategoryCommandResponse {
    success?: boolean;
    message?: string | undefined;
    validationErrors?: string[] | undefined;
    category?: CreateCategoryDto;

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.message = _data["message"];
            if (Array.isArray(_data["validationErrors"])) {
                this.validationErrors = [] as any;
                for (let item of _data["validationErrors"])
                    this.validationErrors!.push(item);
            }
            this.category = _data["category"] ? CreateCategoryDto.fromJS(_data["category"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateCategoryCommandResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCategoryCommandResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["message"] = this.message;
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item);
        }
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        return data;
    }
}

export class CreateCategoryDto {
    categoryId?: string;
    name?: string | undefined;

    init(_data?: any) {
        if (_data) {
            this.categoryId = _data["categoryId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryId"] = this.categoryId;
        data["name"] = this.name;
        return data;
    }
}

export class CreateEventCommand {
    name?: string | undefined;
    price?: number;
    artist?: string | undefined;
    date?: Date;
    description?: string | undefined;
    imageUrl?: string | undefined;
    categoryId?: string;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.price = _data["price"];
            this.artist = _data["artist"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.imageUrl = _data["imageUrl"];
            this.categoryId = _data["categoryId"];
        }
    }

    static fromJS(data: any): CreateEventCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateEventCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["price"] = this.price;
        data["artist"] = this.artist;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["imageUrl"] = this.imageUrl;
        data["categoryId"] = this.categoryId;
        return data;
    }
}

export class EventDetailVm {
    eventId?: string;
    name?: string | undefined;
    price?: number;
    artist?: string | undefined;
    date?: Date;
    description?: string | undefined;
    imageUrl?: string | undefined;
    categoryId?: string;
    category?: CategoryDto;

    init(_data?: any) {
        if (_data) {
            this.eventId = _data["eventId"];
            this.name = _data["name"];
            this.price = _data["price"];
            this.artist = _data["artist"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.imageUrl = _data["imageUrl"];
            this.categoryId = _data["categoryId"];
            this.category = _data["category"] ? CategoryDto.fromJS(_data["category"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EventDetailVm {
        data = typeof data === 'object' ? data : {};
        let result = new EventDetailVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventId"] = this.eventId;
        data["name"] = this.name;
        data["price"] = this.price;
        data["artist"] = this.artist;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["imageUrl"] = this.imageUrl;
        data["categoryId"] = this.categoryId;
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        return data;
    }
}

export class EventListVm {
    eventId?: string;
    name?: string | undefined;
    date?: Date;
    imageUrl?: string | undefined;

    init(_data?: any) {
        if (_data) {
            this.eventId = _data["eventId"];
            this.name = _data["name"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.imageUrl = _data["imageUrl"];
        }
    }

    static fromJS(data: any): EventListVm {
        data = typeof data === 'object' ? data : {};
        let result = new EventListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventId"] = this.eventId;
        data["name"] = this.name;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["imageUrl"] = this.imageUrl;
        return data;
    }
}

export class OrdersForMonthDto {
    id?: string;
    orderTotal?: number;
    orderPlaced?: Date;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orderTotal = _data["orderTotal"];
            this.orderPlaced = _data["orderPlaced"] ? new Date(_data["orderPlaced"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): OrdersForMonthDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrdersForMonthDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderTotal"] = this.orderTotal;
        data["orderPlaced"] = this.orderPlaced ? this.orderPlaced.toISOString() : <any>undefined;
        return data;
    }
}

export class PagedOrdersForMonthVm {
    count?: number;
    page?: number;
    size?: number;
    ordersForMonth?: OrdersForMonthDto[] | undefined;

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            this.page = _data["page"];
            this.size = _data["size"];
            if (Array.isArray(_data["ordersForMonth"])) {
                this.ordersForMonth = [] as any;
                for (let item of _data["ordersForMonth"])
                    this.ordersForMonth!.push(OrdersForMonthDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedOrdersForMonthVm {
        data = typeof data === 'object' ? data : {};
        let result = new PagedOrdersForMonthVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        data["page"] = this.page;
        data["size"] = this.size;
        if (Array.isArray(this.ordersForMonth)) {
            data["ordersForMonth"] = [];
            for (let item of this.ordersForMonth)
                data["ordersForMonth"].push(item.toJSON());
        }
        return data;
    }
}

export class ProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export class UpdateEventCommand {
    eventId?: string;
    name?: string | undefined;
    price?: number;
    artist?: string | undefined;
    date?: Date;
    description?: string | undefined;
    imageUrl?: string | undefined;
    categoryId?: string;

    init(_data?: any) {
        if (_data) {
            this.eventId = _data["eventId"];
            this.name = _data["name"];
            this.price = _data["price"];
            this.artist = _data["artist"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.imageUrl = _data["imageUrl"];
            this.categoryId = _data["categoryId"];
        }
    }

    static fromJS(data: any): UpdateEventCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateEventCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventId"] = this.eventId;
        data["name"] = this.name;
        data["price"] = this.price;
        data["artist"] = this.artist;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["imageUrl"] = this.imageUrl;
        data["categoryId"] = this.categoryId;
        return data;
    }
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}